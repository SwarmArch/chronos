// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sssp_hls,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=16.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1224,HLS_SYN_LUT=1230}" *)

module sssp_hls (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        task_in,
        task_out_V_TDATA,
        task_out_V_TVALID,
        task_out_V_TREADY,
        m_axi_l1_V_AWVALID,
        m_axi_l1_V_AWREADY,
        m_axi_l1_V_AWADDR,
        m_axi_l1_V_AWID,
        m_axi_l1_V_AWLEN,
        m_axi_l1_V_AWSIZE,
        m_axi_l1_V_AWBURST,
        m_axi_l1_V_AWLOCK,
        m_axi_l1_V_AWCACHE,
        m_axi_l1_V_AWPROT,
        m_axi_l1_V_AWQOS,
        m_axi_l1_V_AWREGION,
        m_axi_l1_V_AWUSER,
        m_axi_l1_V_WVALID,
        m_axi_l1_V_WREADY,
        m_axi_l1_V_WDATA,
        m_axi_l1_V_WSTRB,
        m_axi_l1_V_WLAST,
        m_axi_l1_V_WID,
        m_axi_l1_V_WUSER,
        m_axi_l1_V_ARVALID,
        m_axi_l1_V_ARREADY,
        m_axi_l1_V_ARADDR,
        m_axi_l1_V_ARID,
        m_axi_l1_V_ARLEN,
        m_axi_l1_V_ARSIZE,
        m_axi_l1_V_ARBURST,
        m_axi_l1_V_ARLOCK,
        m_axi_l1_V_ARCACHE,
        m_axi_l1_V_ARPROT,
        m_axi_l1_V_ARQOS,
        m_axi_l1_V_ARREGION,
        m_axi_l1_V_ARUSER,
        m_axi_l1_V_RVALID,
        m_axi_l1_V_RREADY,
        m_axi_l1_V_RDATA,
        m_axi_l1_V_RLAST,
        m_axi_l1_V_RID,
        m_axi_l1_V_RUSER,
        m_axi_l1_V_RRESP,
        m_axi_l1_V_BVALID,
        m_axi_l1_V_BREADY,
        m_axi_l1_V_BRESP,
        m_axi_l1_V_BID,
        m_axi_l1_V_BUSER,
        undo_log_entry,
        undo_log_entry_ap_vld
);

parameter    ap_ST_fsm_state1 = 47'd1;
parameter    ap_ST_fsm_state2 = 47'd2;
parameter    ap_ST_fsm_state3 = 47'd4;
parameter    ap_ST_fsm_state4 = 47'd8;
parameter    ap_ST_fsm_state5 = 47'd16;
parameter    ap_ST_fsm_state6 = 47'd32;
parameter    ap_ST_fsm_state7 = 47'd64;
parameter    ap_ST_fsm_state8 = 47'd128;
parameter    ap_ST_fsm_state9 = 47'd256;
parameter    ap_ST_fsm_state10 = 47'd512;
parameter    ap_ST_fsm_state11 = 47'd1024;
parameter    ap_ST_fsm_state12 = 47'd2048;
parameter    ap_ST_fsm_state13 = 47'd4096;
parameter    ap_ST_fsm_state14 = 47'd8192;
parameter    ap_ST_fsm_state15 = 47'd16384;
parameter    ap_ST_fsm_state16 = 47'd32768;
parameter    ap_ST_fsm_state17 = 47'd65536;
parameter    ap_ST_fsm_state18 = 47'd131072;
parameter    ap_ST_fsm_state19 = 47'd262144;
parameter    ap_ST_fsm_state20 = 47'd524288;
parameter    ap_ST_fsm_state21 = 47'd1048576;
parameter    ap_ST_fsm_state22 = 47'd2097152;
parameter    ap_ST_fsm_state23 = 47'd4194304;
parameter    ap_ST_fsm_state24 = 47'd8388608;
parameter    ap_ST_fsm_state25 = 47'd16777216;
parameter    ap_ST_fsm_state26 = 47'd33554432;
parameter    ap_ST_fsm_state27 = 47'd67108864;
parameter    ap_ST_fsm_state28 = 47'd134217728;
parameter    ap_ST_fsm_state29 = 47'd268435456;
parameter    ap_ST_fsm_state30 = 47'd536870912;
parameter    ap_ST_fsm_state31 = 47'd1073741824;
parameter    ap_ST_fsm_state32 = 47'd2147483648;
parameter    ap_ST_fsm_state33 = 47'd4294967296;
parameter    ap_ST_fsm_state34 = 47'd8589934592;
parameter    ap_ST_fsm_state35 = 47'd17179869184;
parameter    ap_ST_fsm_state36 = 47'd34359738368;
parameter    ap_ST_fsm_state37 = 47'd68719476736;
parameter    ap_ST_fsm_state38 = 47'd137438953472;
parameter    ap_ST_fsm_state39 = 47'd274877906944;
parameter    ap_ST_fsm_state40 = 47'd549755813888;
parameter    ap_ST_fsm_state41 = 47'd1099511627776;
parameter    ap_ST_fsm_state42 = 47'd2199023255552;
parameter    ap_ST_fsm_state43 = 47'd4398046511104;
parameter    ap_ST_fsm_state44 = 47'd8796093022208;
parameter    ap_ST_fsm_state45 = 47'd17592186044416;
parameter    ap_ST_fsm_state46 = 47'd35184372088832;
parameter    ap_ST_fsm_state47 = 47'd70368744177664;
parameter    C_M_AXI_L1_V_ID_WIDTH = 1;
parameter    C_M_AXI_L1_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_L1_V_DATA_WIDTH = 32;
parameter    C_M_AXI_L1_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_L1_V_TARGET_ADDR = 0;
parameter    C_M_AXI_L1_V_USER_VALUE = 0;
parameter    C_M_AXI_L1_V_PROT_VALUE = 0;
parameter    C_M_AXI_L1_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_M_AXI_L1_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [68:0] task_in;
output  [71:0] task_out_V_TDATA;
output   task_out_V_TVALID;
input   task_out_V_TREADY;
output   m_axi_l1_V_AWVALID;
input   m_axi_l1_V_AWREADY;
output  [C_M_AXI_L1_V_ADDR_WIDTH - 1:0] m_axi_l1_V_AWADDR;
output  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_AWID;
output  [7:0] m_axi_l1_V_AWLEN;
output  [2:0] m_axi_l1_V_AWSIZE;
output  [1:0] m_axi_l1_V_AWBURST;
output  [1:0] m_axi_l1_V_AWLOCK;
output  [3:0] m_axi_l1_V_AWCACHE;
output  [2:0] m_axi_l1_V_AWPROT;
output  [3:0] m_axi_l1_V_AWQOS;
output  [3:0] m_axi_l1_V_AWREGION;
output  [C_M_AXI_L1_V_AWUSER_WIDTH - 1:0] m_axi_l1_V_AWUSER;
output   m_axi_l1_V_WVALID;
input   m_axi_l1_V_WREADY;
output  [C_M_AXI_L1_V_DATA_WIDTH - 1:0] m_axi_l1_V_WDATA;
output  [C_M_AXI_L1_V_WSTRB_WIDTH - 1:0] m_axi_l1_V_WSTRB;
output   m_axi_l1_V_WLAST;
output  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_WID;
output  [C_M_AXI_L1_V_WUSER_WIDTH - 1:0] m_axi_l1_V_WUSER;
output   m_axi_l1_V_ARVALID;
input   m_axi_l1_V_ARREADY;
output  [C_M_AXI_L1_V_ADDR_WIDTH - 1:0] m_axi_l1_V_ARADDR;
output  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_ARID;
output  [7:0] m_axi_l1_V_ARLEN;
output  [2:0] m_axi_l1_V_ARSIZE;
output  [1:0] m_axi_l1_V_ARBURST;
output  [1:0] m_axi_l1_V_ARLOCK;
output  [3:0] m_axi_l1_V_ARCACHE;
output  [2:0] m_axi_l1_V_ARPROT;
output  [3:0] m_axi_l1_V_ARQOS;
output  [3:0] m_axi_l1_V_ARREGION;
output  [C_M_AXI_L1_V_ARUSER_WIDTH - 1:0] m_axi_l1_V_ARUSER;
input   m_axi_l1_V_RVALID;
output   m_axi_l1_V_RREADY;
input  [C_M_AXI_L1_V_DATA_WIDTH - 1:0] m_axi_l1_V_RDATA;
input   m_axi_l1_V_RLAST;
input  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_RID;
input  [C_M_AXI_L1_V_RUSER_WIDTH - 1:0] m_axi_l1_V_RUSER;
input  [1:0] m_axi_l1_V_RRESP;
input   m_axi_l1_V_BVALID;
output   m_axi_l1_V_BREADY;
input  [1:0] m_axi_l1_V_BRESP;
input  [C_M_AXI_L1_V_ID_WIDTH - 1:0] m_axi_l1_V_BID;
input  [C_M_AXI_L1_V_BUSER_WIDTH - 1:0] m_axi_l1_V_BUSER;
output  [63:0] undo_log_entry;
output   undo_log_entry_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg undo_log_entry_ap_vld;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [46:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [71:0] task_out_V_1_data_out;
reg    task_out_V_1_vld_in;
wire    task_out_V_1_vld_out;
wire    task_out_V_1_ack_in;
wire    task_out_V_1_ack_out;
reg   [71:0] task_out_V_1_payload_A;
reg   [71:0] task_out_V_1_payload_B;
reg    task_out_V_1_sel_rd;
reg    task_out_V_1_sel_wr;
wire    task_out_V_1_sel;
wire    task_out_V_1_load_A;
wire    task_out_V_1_load_B;
reg   [1:0] task_out_V_1_state;
wire    task_out_V_1_state_cmp_full;
reg   [0:0] initialized_V;
reg   [31:0] base_offset_V;
reg   [31:0] base_neighbor_V;
reg   [31:0] base_dist_V;
reg    task_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
reg    l1_V_blk_n_AR;
wire   [0:0] initialized_V_load_load_fu_134_p1;
reg    l1_V_blk_n_R;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state19;
reg    l1_V_blk_n_AW;
wire    ap_CS_fsm_state20;
wire   [0:0] tmp_1_fu_209_p2;
reg    l1_V_blk_n_W;
wire    ap_CS_fsm_state21;
reg    l1_V_blk_n_B;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
reg    l1_V_AWVALID;
wire    l1_V_AWREADY;
reg    l1_V_WVALID;
wire    l1_V_WREADY;
reg    l1_V_ARVALID;
wire    l1_V_ARREADY;
reg   [31:0] l1_V_ARADDR;
reg   [31:0] l1_V_ARLEN;
wire    l1_V_RVALID;
reg    l1_V_RREADY;
wire   [31:0] l1_V_RDATA;
wire    l1_V_RLAST;
wire   [0:0] l1_V_RID;
wire   [0:0] l1_V_RUSER;
wire   [1:0] l1_V_RRESP;
wire    l1_V_BVALID;
reg    l1_V_BREADY;
wire   [1:0] l1_V_BRESP;
wire   [0:0] l1_V_BID;
wire   [0:0] l1_V_BUSER;
reg    ap_sig_ioackin_l1_V_ARREADY;
reg    ap_block_state1_io;
reg   [31:0] base_dist_V_load_reg_344;
wire    ap_CS_fsm_state11;
wire   [32:0] rhs_V_fu_186_p1;
reg   [32:0] rhs_V_reg_349;
reg   [31:0] l1_V_addr_1_reg_354;
reg   [31:0] cur_dist_V_reg_360;
wire   [31:0] tmp_2_fu_206_p1;
reg   [31:0] tmp_2_reg_366;
reg    ap_sig_ioackin_l1_V_AWREADY;
reg    ap_block_state20_io;
reg   [0:0] tmp_1_reg_372;
reg   [31:0] l1_V_addr_2_reg_376;
reg   [31:0] offset_begin_V_reg_382;
reg   [31:0] offset_end_V_reg_387;
reg   [31:0] l1_V_addr_3_reg_395;
wire    ap_CS_fsm_state36;
wire   [0:0] tmp_8_fu_237_p2;
wire   [31:0] i_1_fu_276_p2;
reg   [31:0] i_1_reg_401;
reg   [31:0] neighbor_V_reg_406;
reg   [31:0] weight_V_reg_411;
wire  signed [71:0] cast_fu_323_p1;
reg   [31:0] i1_reg_125;
wire   [63:0] tmp_fu_196_p1;
wire   [63:0] tmp_4_fu_227_p1;
wire  signed [63:0] tmp_s_fu_266_p1;
reg    ap_reg_ioackin_l1_V_ARREADY;
reg    ap_reg_ioackin_l1_V_AWREADY;
reg    ap_reg_ioackin_l1_V_WREADY;
reg    ap_sig_ioackin_l1_V_WREADY;
wire   [31:0] vid_V_fu_169_p4;
wire   [32:0] lhs_V_fu_182_p1;
wire   [32:0] r_V_fu_190_p2;
wire   [32:0] lhs_V_1_fu_218_p1;
wire   [32:0] r_V_1_fu_222_p2;
wire   [31:0] tmp_5_fu_242_p2;
wire   [33:0] lhs_V_2_fu_252_p1;
wire  signed [33:0] rhs_V_1_fu_256_p1;
wire   [33:0] r_V_2_fu_260_p2;
wire   [29:0] tmp_6_fu_291_p1;
wire   [29:0] tmp_3_fu_282_p4;
wire   [29:0] tmp_9_fu_294_p2;
wire   [31:0] child_ts_V_fu_310_p2;
wire   [68:0] tmp1_fu_314_p4;
reg   [46:0] ap_NS_fsm;
reg    ap_condition_210;

// power-on initialization
initial begin
#0 ap_CS_fsm = 47'd1;
#0 task_out_V_1_sel_rd = 1'b0;
#0 task_out_V_1_sel_wr = 1'b0;
#0 task_out_V_1_state = 2'd0;
#0 initialized_V = 1'd0;
#0 base_offset_V = 32'd0;
#0 base_neighbor_V = 32'd0;
#0 base_dist_V = 32'd0;
#0 ap_reg_ioackin_l1_V_ARREADY = 1'b0;
#0 ap_reg_ioackin_l1_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_l1_V_WREADY = 1'b0;
end

sssp_hls_l1_V_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_L1_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_L1_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_L1_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_L1_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_L1_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_L1_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_L1_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_L1_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_L1_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_L1_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_L1_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_L1_V_CACHE_VALUE ))
sssp_hls_l1_V_m_axi_U(
    .AWVALID(m_axi_l1_V_AWVALID),
    .AWREADY(m_axi_l1_V_AWREADY),
    .AWADDR(m_axi_l1_V_AWADDR),
    .AWID(m_axi_l1_V_AWID),
    .AWLEN(m_axi_l1_V_AWLEN),
    .AWSIZE(m_axi_l1_V_AWSIZE),
    .AWBURST(m_axi_l1_V_AWBURST),
    .AWLOCK(m_axi_l1_V_AWLOCK),
    .AWCACHE(m_axi_l1_V_AWCACHE),
    .AWPROT(m_axi_l1_V_AWPROT),
    .AWQOS(m_axi_l1_V_AWQOS),
    .AWREGION(m_axi_l1_V_AWREGION),
    .AWUSER(m_axi_l1_V_AWUSER),
    .WVALID(m_axi_l1_V_WVALID),
    .WREADY(m_axi_l1_V_WREADY),
    .WDATA(m_axi_l1_V_WDATA),
    .WSTRB(m_axi_l1_V_WSTRB),
    .WLAST(m_axi_l1_V_WLAST),
    .WID(m_axi_l1_V_WID),
    .WUSER(m_axi_l1_V_WUSER),
    .ARVALID(m_axi_l1_V_ARVALID),
    .ARREADY(m_axi_l1_V_ARREADY),
    .ARADDR(m_axi_l1_V_ARADDR),
    .ARID(m_axi_l1_V_ARID),
    .ARLEN(m_axi_l1_V_ARLEN),
    .ARSIZE(m_axi_l1_V_ARSIZE),
    .ARBURST(m_axi_l1_V_ARBURST),
    .ARLOCK(m_axi_l1_V_ARLOCK),
    .ARCACHE(m_axi_l1_V_ARCACHE),
    .ARPROT(m_axi_l1_V_ARPROT),
    .ARQOS(m_axi_l1_V_ARQOS),
    .ARREGION(m_axi_l1_V_ARREGION),
    .ARUSER(m_axi_l1_V_ARUSER),
    .RVALID(m_axi_l1_V_RVALID),
    .RREADY(m_axi_l1_V_RREADY),
    .RDATA(m_axi_l1_V_RDATA),
    .RLAST(m_axi_l1_V_RLAST),
    .RID(m_axi_l1_V_RID),
    .RUSER(m_axi_l1_V_RUSER),
    .RRESP(m_axi_l1_V_RRESP),
    .BVALID(m_axi_l1_V_BVALID),
    .BREADY(m_axi_l1_V_BREADY),
    .BRESP(m_axi_l1_V_BRESP),
    .BID(m_axi_l1_V_BID),
    .BUSER(m_axi_l1_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(l1_V_ARVALID),
    .I_ARREADY(l1_V_ARREADY),
    .I_ARADDR(l1_V_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(l1_V_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(l1_V_RVALID),
    .I_RREADY(l1_V_RREADY),
    .I_RDATA(l1_V_RDATA),
    .I_RID(l1_V_RID),
    .I_RUSER(l1_V_RUSER),
    .I_RRESP(l1_V_RRESP),
    .I_RLAST(l1_V_RLAST),
    .I_AWVALID(l1_V_AWVALID),
    .I_AWREADY(l1_V_AWREADY),
    .I_AWADDR(l1_V_addr_1_reg_354),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(l1_V_WVALID),
    .I_WREADY(l1_V_WREADY),
    .I_WDATA(tmp_2_reg_366),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(l1_V_BVALID),
    .I_BREADY(l1_V_BREADY),
    .I_BRESP(l1_V_BRESP),
    .I_BID(l1_V_BID),
    .I_BUSER(l1_V_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_l1_V_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state1) & (1'd0 == initialized_V) & ~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io))) | ((1'b1 == ap_CS_fsm_state12) & (ap_sig_ioackin_l1_V_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (ap_sig_ioackin_l1_V_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state37) & (ap_sig_ioackin_l1_V_ARREADY == 1'b1)))) begin
            ap_reg_ioackin_l1_V_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd0 == initialized_V) & (1'b1 == l1_V_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == l1_V_ARREADY)) | ((1'b1 == ap_CS_fsm_state27) & (1'b1 == l1_V_ARREADY)) | ((1'b1 == ap_CS_fsm_state37) & (1'b1 == l1_V_ARREADY)))) begin
            ap_reg_ioackin_l1_V_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_l1_V_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state20) & (1'd1 == tmp_1_fu_209_p2))) begin
            if ((ap_block_state20_io == 1'b0)) begin
                ap_reg_ioackin_l1_V_AWREADY <= 1'b0;
            end else if ((1'b1 == l1_V_AWREADY)) begin
                ap_reg_ioackin_l1_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_l1_V_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            if ((ap_sig_ioackin_l1_V_WREADY == 1'b1)) begin
                ap_reg_ioackin_l1_V_WREADY <= 1'b0;
            end else if ((1'b1 == l1_V_WREADY)) begin
                ap_reg_ioackin_l1_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        task_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == task_out_V_1_ack_out) & (1'b1 == task_out_V_1_vld_out))) begin
            task_out_V_1_sel_rd <= ~task_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        task_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == task_out_V_1_vld_in) & (1'b1 == task_out_V_1_ack_in))) begin
            task_out_V_1_sel_wr <= ~task_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        task_out_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == task_out_V_1_vld_in) & (1'b1 == task_out_V_1_ack_out) & (task_out_V_1_state == 2'd3)) | ((1'b0 == task_out_V_1_vld_in) & (task_out_V_1_state == 2'd2)))) begin
            task_out_V_1_state <= 2'd2;
        end else if ((((1'b1 == task_out_V_1_vld_in) & (1'b0 == task_out_V_1_ack_out) & (task_out_V_1_state == 2'd3)) | ((1'b0 == task_out_V_1_ack_out) & (task_out_V_1_state == 2'd1)))) begin
            task_out_V_1_state <= 2'd1;
        end else if ((((1'b1 == task_out_V_1_vld_in) & (task_out_V_1_state == 2'd2)) | ((1'b1 == task_out_V_1_ack_out) & (task_out_V_1_state == 2'd1)) | ((task_out_V_1_state == 2'd3) & ~((1'b1 == task_out_V_1_vld_in) & (1'b0 == task_out_V_1_ack_out)) & ~((1'b0 == task_out_V_1_vld_in) & (1'b1 == task_out_V_1_ack_out))))) begin
            task_out_V_1_state <= 2'd3;
        end else begin
            task_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & (task_out_V_1_ack_in == 1'b1))) begin
        i1_reg_125 <= i_1_reg_401;
    end else if (((1'b1 == ap_CS_fsm_state35) & (l1_V_RVALID == 1'b1))) begin
        i1_reg_125 <= offset_begin_V_reg_382;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (l1_V_RVALID == 1'b1))) begin
        base_dist_V <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        base_dist_V_load_reg_344 <= base_dist_V;
        l1_V_addr_1_reg_354 <= tmp_fu_196_p1;
        rhs_V_reg_349[31 : 0] <= rhs_V_fu_186_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (l1_V_RVALID == 1'b1))) begin
        base_neighbor_V <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (l1_V_RVALID == 1'b1))) begin
        base_offset_V <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (l1_V_RVALID == 1'b1))) begin
        cur_dist_V_reg_360 <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (task_out_V_1_ack_in == 1'b1) & (1'd1 == tmp_1_reg_372) & (1'd1 == tmp_8_fu_237_p2))) begin
        i_1_reg_401 <= i_1_fu_276_p2;
        l1_V_addr_3_reg_395 <= tmp_s_fu_266_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'd0 == initialized_V) & ~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)))) begin
        initialized_V <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & (l1_V_BVALID == 1'b1))) begin
        l1_V_addr_2_reg_376 <= tmp_4_fu_227_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (l1_V_RVALID == 1'b1))) begin
        neighbor_V_reg_406 <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (l1_V_RVALID == 1'b1))) begin
        offset_begin_V_reg_382 <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & (l1_V_RVALID == 1'b1))) begin
        offset_end_V_reg_387 <= l1_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == task_out_V_1_load_A)) begin
        task_out_V_1_payload_A <= cast_fu_323_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == task_out_V_1_load_B)) begin
        task_out_V_1_payload_B <= cast_fu_323_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (ap_block_state20_io == 1'b0))) begin
        tmp_1_reg_372 <= tmp_1_fu_209_p2;
        tmp_2_reg_366 <= tmp_2_fu_206_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (l1_V_RVALID == 1'b1))) begin
        weight_V_reg_411 <= l1_V_RDATA;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & (task_out_V_1_ack_in == 1'b1) & ((1'd0 == tmp_8_fu_237_p2) | (1'd0 == tmp_1_reg_372)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & (task_out_V_1_ack_in == 1'b1) & ((1'd0 == tmp_8_fu_237_p2) | (1'd0 == tmp_1_reg_372)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_l1_V_ARREADY)) begin
        ap_sig_ioackin_l1_V_ARREADY = l1_V_ARREADY;
    end else begin
        ap_sig_ioackin_l1_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_l1_V_AWREADY)) begin
        ap_sig_ioackin_l1_V_AWREADY = l1_V_AWREADY;
    end else begin
        ap_sig_ioackin_l1_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_l1_V_WREADY)) begin
        ap_sig_ioackin_l1_V_WREADY = l1_V_WREADY;
    end else begin
        ap_sig_ioackin_l1_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_l1_V_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state37)) begin
            l1_V_ARADDR = l1_V_addr_3_reg_395;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            l1_V_ARADDR = l1_V_addr_2_reg_376;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            l1_V_ARADDR = l1_V_addr_1_reg_354;
        end else if ((ap_condition_210 == 1'b1)) begin
            l1_V_ARADDR = 64'd3;
        end else begin
            l1_V_ARADDR = 'bx;
        end
    end else begin
        l1_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state27) & (1'b0 == ap_reg_ioackin_l1_V_ARREADY)) | ((1'b1 == ap_CS_fsm_state37) & (1'b0 == ap_reg_ioackin_l1_V_ARREADY)))) begin
        l1_V_ARLEN = 32'd2;
    end else if (((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_reg_ioackin_l1_V_ARREADY))) begin
        l1_V_ARLEN = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd0 == initialized_V) & (1'b0 == ap_reg_ioackin_l1_V_ARREADY))) begin
        l1_V_ARLEN = 32'd3;
    end else begin
        l1_V_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd0 == initialized_V) & (1'b0 == ap_reg_ioackin_l1_V_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_reg_ioackin_l1_V_ARREADY)) | ((1'b1 == ap_CS_fsm_state27) & (1'b0 == ap_reg_ioackin_l1_V_ARREADY)) | ((1'b1 == ap_CS_fsm_state37) & (1'b0 == ap_reg_ioackin_l1_V_ARREADY)))) begin
        l1_V_ARVALID = 1'b1;
    end else begin
        l1_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd1 == tmp_1_fu_209_p2) & (1'b0 == ap_reg_ioackin_l1_V_AWREADY))) begin
        l1_V_AWVALID = 1'b1;
    end else begin
        l1_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (l1_V_BVALID == 1'b1))) begin
        l1_V_BREADY = 1'b1;
    end else begin
        l1_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state19) & (l1_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state34) & (l1_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (l1_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state44) & (l1_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (l1_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (l1_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (l1_V_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (l1_V_RVALID == 1'b1)))) begin
        l1_V_RREADY = 1'b1;
    end else begin
        l1_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'b0 == ap_reg_ioackin_l1_V_WREADY))) begin
        l1_V_WVALID = 1'b1;
    end else begin
        l1_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd0 == initialized_V)) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state37))) begin
        l1_V_blk_n_AR = m_axi_l1_V_ARREADY;
    end else begin
        l1_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd1 == tmp_1_fu_209_p2))) begin
        l1_V_blk_n_AW = m_axi_l1_V_AWREADY;
    end else begin
        l1_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        l1_V_blk_n_B = m_axi_l1_V_BVALID;
    end else begin
        l1_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45))) begin
        l1_V_blk_n_R = m_axi_l1_V_RVALID;
    end else begin
        l1_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        l1_V_blk_n_W = m_axi_l1_V_WREADY;
    end else begin
        l1_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == task_out_V_1_sel)) begin
        task_out_V_1_data_out = task_out_V_1_payload_B;
    end else begin
        task_out_V_1_data_out = task_out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (task_out_V_1_ack_in == 1'b1))) begin
        task_out_V_1_vld_in = 1'b1;
    end else begin
        task_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47))) begin
        task_out_V_TDATA_blk_n = task_out_V_1_state[1'd1];
    end else begin
        task_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) & (task_out_V_1_ack_in == 1'b1) & (1'd1 == tmp_1_reg_372) & (1'd0 == tmp_8_fu_237_p2))) begin
        undo_log_entry_ap_vld = 1'b1;
    end else begin
        undo_log_entry_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)) & (1'd1 == initialized_V_load_load_fu_134_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((1'b1 == ap_CS_fsm_state1) & (1'd0 == initialized_V) & ~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (l1_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (l1_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (l1_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (ap_sig_ioackin_l1_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (l1_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (ap_block_state20_io == 1'b0) & (1'd0 == tmp_1_fu_209_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else if (((1'b1 == ap_CS_fsm_state20) & (1'd1 == tmp_1_fu_209_p2) & (ap_block_state20_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (ap_sig_ioackin_l1_V_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (l1_V_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (ap_sig_ioackin_l1_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (l1_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (l1_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (task_out_V_1_ack_in == 1'b1) & ((1'd0 == tmp_8_fu_237_p2) | (1'd0 == tmp_1_reg_372)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state36) & (task_out_V_1_ack_in == 1'b1) & (1'd1 == tmp_1_reg_372) & (1'd1 == tmp_8_fu_237_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (ap_sig_ioackin_l1_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (l1_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (l1_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (task_out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (task_out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1_io = ((1'd0 == initialized_V) & (1'b0 == ap_sig_ioackin_l1_V_ARREADY));
end

always @ (*) begin
    ap_block_state20_io = ((1'd1 == tmp_1_fu_209_p2) & (1'b0 == ap_sig_ioackin_l1_V_AWREADY));
end

always @ (*) begin
    ap_condition_210 = ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'd0 == initialized_V));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cast_fu_323_p1 = $signed(tmp1_fu_314_p4);

assign child_ts_V_fu_310_p2 = (weight_V_reg_411 + tmp_2_reg_366);

assign i_1_fu_276_p2 = (32'd1 + i1_reg_125);

assign initialized_V_load_load_fu_134_p1 = initialized_V;

assign lhs_V_1_fu_218_p1 = base_offset_V;

assign lhs_V_2_fu_252_p1 = base_neighbor_V;

assign lhs_V_fu_182_p1 = base_dist_V;

assign r_V_1_fu_222_p2 = (lhs_V_1_fu_218_p1 + rhs_V_reg_349);

assign r_V_2_fu_260_p2 = ($signed(lhs_V_2_fu_252_p1) + $signed(rhs_V_1_fu_256_p1));

assign r_V_fu_190_p2 = (rhs_V_fu_186_p1 + lhs_V_fu_182_p1);

assign rhs_V_1_fu_256_p1 = $signed(tmp_5_fu_242_p2);

assign rhs_V_fu_186_p1 = vid_V_fu_169_p4;

assign task_out_V_1_ack_in = task_out_V_1_state[1'd1];

assign task_out_V_1_ack_out = task_out_V_TREADY;

assign task_out_V_1_load_A = (task_out_V_1_state_cmp_full & ~task_out_V_1_sel_wr);

assign task_out_V_1_load_B = (task_out_V_1_sel_wr & task_out_V_1_state_cmp_full);

assign task_out_V_1_sel = task_out_V_1_sel_rd;

assign task_out_V_1_state_cmp_full = ((task_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign task_out_V_1_vld_out = task_out_V_1_state[1'd0];

assign task_out_V_TDATA = task_out_V_1_data_out;

assign task_out_V_TVALID = task_out_V_1_state[1'd0];

assign tmp1_fu_314_p4 = {{{{5'd0}, {neighbor_V_reg_406}}}, {child_ts_V_fu_310_p2}};

assign tmp_1_fu_209_p2 = ((tmp_2_fu_206_p1 < cur_dist_V_reg_360) ? 1'b1 : 1'b0);

assign tmp_2_fu_206_p1 = task_in[31:0];

assign tmp_3_fu_282_p4 = {{task_in[61:32]}};

assign tmp_4_fu_227_p1 = r_V_1_fu_222_p2;

assign tmp_5_fu_242_p2 = i1_reg_125 << 32'd1;

assign tmp_6_fu_291_p1 = base_dist_V_load_reg_344[29:0];

assign tmp_8_fu_237_p2 = ((i1_reg_125 < offset_end_V_reg_387) ? 1'b1 : 1'b0);

assign tmp_9_fu_294_p2 = (tmp_6_fu_291_p1 + tmp_3_fu_282_p4);

assign tmp_fu_196_p1 = r_V_fu_190_p2;

assign tmp_s_fu_266_p1 = $signed(r_V_2_fu_260_p2);

assign undo_log_entry = {{{cur_dist_V_reg_360}, {tmp_9_fu_294_p2}}, {2'd0}};

assign vid_V_fu_169_p4 = {{task_in[63:32]}};

always @ (posedge ap_clk) begin
    rhs_V_reg_349[32] <= 1'b0;
end

endmodule //sssp_hls
